@using GamsIRep.IRepositry
@using global::Games.Domain.Entity


@if (isVisible)
{
    <div class="modal show" tabindex="-1" style="display: block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@((user.Id == 0) ? "Add user" : "Edit user")</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="Cancel"></button>
                </div>
                <div class="modal-body">

                    <div class="mb-3">
                        <label for="Name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="Name" @bind="user.Name">
                    </div>
                    <div class="mb-3">
                        <label for="Password" class="form-label">Password</label>
                        <input type="text" class="form-control" id="Password" @bind="user.Password">
                    </div>
                    <div class="mb-3">
                        <label for="PhonNumber" class="form-label">PhonNumber</label>
                        <input type="text" class="form-control" id="PhonNumber" @bind="user.PhonNumber">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="Save">Save</button>
                </div>
            </div>
        </div>
    </div>



}

@code {

    [Parameter] public EventCallback OnSave { get; set; }

    [Inject] public IUseRep UserService { get; set; }

    private bool isVisible;

    private User user = new();

    public void Show(User user)
    {
        this.user = user;
        isVisible = true;
    }

    private void Save()
    {
        if (user.Id == 0)
        {
            UserService.Creat(user);
        }
        else
        {
            UserService.Update(user);
        }

        isVisible = false;
        OnSave.InvokeAsync();
    }

    private void Cancel()
    {
        isVisible = false;
    }
}

